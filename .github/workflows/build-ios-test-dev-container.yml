name: Build iOS Test Development Container App
env:
  test_app_path: tests/test
  test_app_package_name: test-app
  # Used for cache keys, must be unique among all workflows
  app_identifier: ios-test-dev-container-app
  built_product_path: Debug-iphonesimulator/OneTestApp.app
on:
  workflow_call:
    outputs:
      build-hash:
        description: "A hash to identify the build."
        value: ${{ jobs.build-ios.outputs.build-hash }}
      built-app-cache-key:
        description: "The cache key of the built .app."
        value: ${{ jobs.build-ios.outputs.built-app-cache-key }}
      built-app-path:
        description: "The path to the built .app relative to the repository root."
        value: ${{ jobs.build-ios.outputs.built-app-path }}
      # version:
      #   description: "The version of the build."
      #   value: ${{ jobs.build-ios.outputs.version }}
      # build-number:
      #   description: "The build number of the build."
      #   value: ${{ jobs.build-ios.outputs.build-number }}
      # archive-artifact-id:
      #   description: "The artifact id of the Xcode archive."
      #   value: ${{ jobs.build-ios.outputs.archive-artifact-id }}
      # archive-artifact-url:
      #   description: "The artifact URL of the Xcode archive."
      #   value: ${{ jobs.build-ios.outputs.archive-artifact-url }}
      # archive-artifact-name:
      #   description: "The artifact name of the Xcode archive."
      #   value: ${{ jobs.build-ios.outputs.archive-artifact-name }}
      # ipa-artifact-id:
      #   description: "The artifact id of the IPA."
      #   value: ${{ jobs.build-ios.outputs.ipa-artifact-id }}
      # ipa-artifact-url:
      #   description: "The artifact URL of the IPA."
      #   value: ${{ jobs.build-ios.outputs.ipa-artifact-url }}
      # ipa-artifact-name:
      #   description: "The artifact name of the IPA."
      #   value: ${{ jobs.build-ios.outputs.ipa-artifact-name }}
      # testflight-upload-succeeded:
      #   description: "Whether the TestFlight upload succeeded."
      #   value: ${{ jobs.build-ios.outputs.testflight-upload-succeeded }}
      # install-url:
      #   description: "URL to install the built app."
      #   value: ${{ jobs.build-ios.outputs.install-url }}

jobs:
  build-ios:
    name: Build
    runs-on: macos-13
    permissions:
      contents: read
      pull-requests: read
    timeout-minutes: 60
    outputs:
      build-hash: ${{ steps.caculate-build-hash.outputs.build_hash }}
      built-app-cache-key: ${{ steps.check-previous-build.outputs.cache-primary-key || steps.pre-check-previous-build.outputs.cache-primary-key }}
      built-app-path: ${{ env.test_app_path }}/build/Build/Products/${{ env.built_product_path }}
      # build-number: ${{ steps.update-build-number.outputs.build_number }}
      # archive-artifact-id: ${{ steps.upload-archive.outputs.artifact-id }}
      # archive-artifact-url: ${{ steps.upload-archive.outputs.artifact-url }}
      # archive-artifact-name: ${{ steps.get-archive-artifact-name.outputs.archive_artifact_name }}
      # ipa-artifact-id: ${{ steps.upload-ipa.outputs.artifact-id }}
      # ipa-artifact-url: ${{ steps.upload-ipa.outputs.artifact-url }}
      # ipa-artifact-name: ${{ steps.get-ipa-artifact-name.outputs.ipa_artifact_name }}
      # testflight-upload-succeeded: ${{ steps.upload-to-testflight.outputs.testflight_upload_succeeded }}
      # install-url: ${{ steps.upload-to-appsend.outputs.install_url }}
    defaults:
      run:
        working-directory: ${{ env.test_app_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Caculate Pre-Build Hash
        id: caculate-pre-build-hash
        env:
          # A hash that can save us more time if we can already know that the build hash will not change.
          #
          # Calculating the build_hash relies on generated files, for example, `Podfile.lock`, and it’ll take some time to run `yarn install`, `expo prebuild` and `pod install` in order to get that. But if `yarn.lock` didn’t change, there’s no likely that `Podfile.lock` will change - we can leverage that and skip some installation steps.
          #
          # This hash MUST be different if the build_hash will be different.
          #
          # This hash can be different if the build_hash remains the same. For example, if `yarn.lock` changes, `Podfile.lock` may not change if the updated package contains no native code.
          PRE_BUILD_HASH: ${{ hashFiles(format('{0}/yarn.lock', env.test_app_path), format('{0}/app.json', env.test_app_path), 'packages/vxrn/expo-plugin.cjs') }}
        run: |
          if [ -z "$PRE_BUILD_HASH" ]; then
            echo '[ERROR] Failed to calculate pre-build hash.'
          fi
          echo "Pre-build hash: $PRE_BUILD_HASH"
          echo "pre_build_hash=$PRE_BUILD_HASH" >> $GITHUB_OUTPUT

      - name: Check Pre-Build Hash
        uses: actions/cache/restore@v4
        id: check-pre-build-hash
        with:
          key: ${{ env.app_identifier }}-pre-build-hash-to-hash-mapping-${{ steps.caculate-pre-build-hash.outputs.pre_build_hash }}
          path: |
            ${{ env.test_app_path }}/build-hash.txt

      - name: Read Build Hash from Cache
        id: read-build-hash
        run: |
          if [ -f build-hash.txt ]; then
            BUILD_HASH=$(tr -d '[:space:]' < build-hash.txt)
            echo "Build hash: $BUILD_HASH"
            echo "build_hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          else
            echo 'No cached build hash found.'
            echo "build_hash=NULL" >> $GITHUB_OUTPUT
          fi

      - name: Check Previous Build with Cached Build Hash
        uses: actions/cache/restore@v4
        id: pre-check-previous-build
        with:
          key: ${{ env.app_identifier }}-${{ steps.read-build-hash.outputs.build_hash }}
          lookup-only: true
          path: |
            ${{ env.test_app_path }}/build/Build/Products/${{ env.built_product_path }}

      - name: Install
        uses: ./.github/actions/install
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        with:
          workspace-focus: ${{ env.test_app_package_name }}

      - name: Prebuild
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        run: |
          node_modules/.bin/expo prebuild --platform ios --no-install # --no-install is used to skip installing dependencies, specifically `pod install` as we want to do it after the Cache Pods step

      # - name: Install CocoaPods and Fastlane
      #   run: |
      #     gem install cocoapods:1.15.2 fastlane:2.219.0 rb_json5
      #     echo "CocoaPods version: $(pod --version)"

      - name: Cache Pods
        uses: actions/cache@v4
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        env:
          cache-name: ${{ env.app_identifier }}-pods
        with:
          path: ${{ env.test_app_path }}/ios/Pods
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles(format('{0}/ios/Podfile.lock', env.test_app_path)) }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Pod Install
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        run: |
          cd ios && pod install

      - name: Caculate Build Hash
        id: caculate-build-hash
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        env:
          # We need to list all files that will affect native code in hashFiles.
          BUILD_HASH: ${{ hashFiles(format('{0}/ios/Podfile.lock', env.test_app_path), format('{0}/app.json', env.test_app_path), 'packages/vxrn/expo-plugin.cjs') }}
        run: |
          if [ -z "$BUILD_HASH" ]; then
            echo '[ERROR] Failed to calculate build hash.'
            exit 1
          fi
          echo "Build hash: $BUILD_HASH"
          echo "build_hash=$BUILD_HASH" >> $GITHUB_OUTPUT

      # - name: Check Previous Builds
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh cache list

      - name: Write Build Hash
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        env:
          BUILD_HASH: ${{ steps.caculate-build-hash.outputs.build_hash }}
        run: |
          echo $BUILD_HASH > build-hash.txt

      - name: Save Pre-Build Hash Mapping
        uses: actions/cache/save@v4
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        with:
          key: ${{ env.app_identifier }}-pre-build-hash-to-hash-mapping-${{ steps.caculate-pre-build-hash.outputs.pre_build_hash }}
          path: |
            ${{ env.test_app_path }}/build-hash.txt

      - name: Check Previous Build
        uses: actions/cache/restore@v4
        id: check-previous-build
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit }}
        with:
          key: ${{ env.app_identifier }}-${{ steps.caculate-build-hash.outputs.build_hash }}
          lookup-only: true
          path: |
            ${{ env.test_app_path }}/build/Build/Products/${{ env.built_product_path }}

      # - name: Prepare code signing storage Git SSH private key
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.CODE_SIGNING_STORAGE_GIT_SSH_PRIVATE_KEY }}
      #   run: |
      #     if [ -z "$SSH_PRIVATE_KEY" ]; then
      #       echo '[ERROR] Environment secret "CODE_SIGNING_STORAGE_GIT_SSH_PRIVATE_KEY" is not set.'
      #     fi
      #     ssh-agent sh -c 'echo "$SSH_PRIVATE_KEY"' | ssh-add -

      # - name: Update build number
      #   id: update-build-number
      #   env:
      #     APP_STORE_CONNECT_API_KEY_ID: ${{ vars.APP_STORE_CONNECT_API_KEY_ID }}
      #     APP_STORE_CONNECT_API_ISSUER_ID: ${{ vars.APP_STORE_CONNECT_API_ISSUER_ID }}
      #     APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      #     GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      #     GITHUB_REPOSITORY_ID: ${{ github.repository_id }}
      #     GITHUB_ENVIRONMENT: ${{ inputs.environment }}
      #   run: |
      #     fastlane ios update_build_number

      #     current_build_number=$(jq '.ios.currentBuildNumber' app.json)
      #     echo "Current build number: $current_build_number"
      #     echo "build_number=$current_build_number" >> $GITHUB_OUTPUT

      # - name: BuildCache
      #   uses: mikehardy/buildcache-action@v2
      #   env:
      #     cache-name: test-app-ios
      #   with:
      #     cache_key: ${{ runner.os }}-${{ env.cache-name }}

      # - uses: irgaly/xcode-cache@v1.8.0
      #   env:
      #     cache-name: test-app-ios
      #   with:
      #     key: ${{ runner.os }}-xcode-cache-${{ env.cache-name }}

      - name: Restore Build Cache
        id: restore-build-cache
        uses: actions/cache/restore@v4
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit && !steps.check-previous-build.outputs.cache-hit }}
        env:
          cache-name: ios-test-dev-container-build
        with:
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ steps.caculate-build-hash.outputs.build_hash }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}-
          path: |
            ${{ env.test_app_path }}/build

      - name: Build
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit && !steps.check-previous-build.outputs.cache-hit }}
        run: |
          xcrun xcodebuild -scheme 'OneTestApp' \
            -workspace 'ios/OneTestApp.xcworkspace' \
            -configuration Debug \
            -sdk 'iphonesimulator' \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath \
            build | tee xcodebuild.log | xcpretty

      - name: Upload Build Log
        uses: actions/upload-artifact@v4.3.1
        if:  ${{ always() && !steps.pre-check-previous-build.outputs.cache-hit && !steps.check-previous-build.outputs.cache-hit }}
        with:
          name: xcodebuild.log
          path: |
            ${{ env.test_app_path }}/xcodebuild.log

      # - name: Upload Build
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     path: |
      #       ${{ env.test_app_path }}/build

      - name: Save Build Cache
        uses: actions/cache/save@v4
        if:  ${{ always() && !steps.pre-check-previous-build.outputs.cache-hit && !steps.check-previous-build.outputs.cache-hit }}
        with:
          key: ${{ steps.restore-build-cache.outputs.cache-primary-key }}
          path: |
            ${{ env.test_app_path }}/build

      - name: Save Built App
        uses: actions/cache/save@v4
        if: ${{ !steps.pre-check-previous-build.outputs.cache-hit && !steps.check-previous-build.outputs.cache-hit }}
        with:
          key: ${{ steps.check-previous-build.outputs.cache-primary-key }}
          path: |
            ${{ env.test_app_path }}/build/Build/Products/${{ env.built_product_path }}

      # - name: Upload Build
      #   # if: steps.cache-primes-restore.outputs.cache-hit != 'true'
      #   uses: actions/cache/save@v4
      #   env:
      #     cache-name: ios-test-dev-container
      #   with:
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ steps.caculate-build-hash.outputs.build_hash }}
      #     path: |
      #       ${{ env.test_app_path }}/build

      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2
      #   env:
      #     cache-name: rn-app-ios
      #   with:
      #     key: ${{ runner.os }}-${{ env.cache-name }}

      # - name: Build
      #   env:
      #     CODE_SIGNING_STORAGE_GIT_URL: ${{ vars.CODE_SIGNING_STORAGE_GIT_URL }}
      #     MATCH_PASSWORD: ${{ secrets.CODE_SIGNING_STORAGE_PASSPHRASE }}
      #   run: |
      #     if [ -z "$CODE_SIGNING_STORAGE_GIT_URL" ]; then
      #       echo '[ERROR] Environment variable "CODE_SIGNING_STORAGE_GIT_URL" is not set.'
      #     fi
      #     if [ -z "$MATCH_PASSWORD" ]; then
      #       echo '[ERROR] Environment secret "CODE_SIGNING_STORAGE_PASSPHRASE" is not set.'
      #     fi

      #     echo "export NODE_BINARY=$(command -v node)" > ios/.xcode.env.local

      #     # See: https://reactnative.dev/docs/build-speed#xcode-specific-setup
      #     export CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros
      #     export CCACHE_FILECLONE=true
      #     export CCACHE_DEPEND=true
      #     export CCACHE_INODECACHE=true

      #     # setup_code_signing needs to be run with build for build_app to find the correct provisioning profiles from ENV
      #     fastlane ios build setup_code_signing:true

      # - name: Upload to TestFlight
      #   id: upload-to-testflight
      #   if: ${{ vars.SKIP_UPLOAD_TO_TESTFLIGHT != 'true' }}
      #   continue-on-error: true
      #   timeout-minutes: 16
      #   env:
      #     APP_STORE_CONNECT_API_KEY_ID: ${{ vars.APP_STORE_CONNECT_API_KEY_ID }}
      #     APP_STORE_CONNECT_API_ISSUER_ID: ${{ vars.APP_STORE_CONNECT_API_ISSUER_ID }}
      #     APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      #     CHANGELOG: ${{ inputs.changelog }}
      #   run: |
      #     fastlane ios lane_upload_to_testflight
      #     echo "testflight_upload_succeeded=true" >> $GITHUB_OUTPUT

      # - name: Re-export IPA
      #   run: |
      #     find . -maxdepth 1 \( -name '*.ipa' \) -exec rm -rf {} +
      #     fastlane ios export_ipa

      # - name: Get Archive Artifact name
      #   id: get-archive-artifact-name
      #   run: |
      #     archive_artifact_name="${{ inputs.environment }} Archive"
      #     echo "Archive artifact name: $archive_artifact_name"
      #     echo "archive_artifact_name=$archive_artifact_name" >> $GITHUB_OUTPUT

      # - name: Upload Archive
      #   id: upload-archive
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: ${{ steps.get-archive-artifact-name.outputs.archive_artifact_name }}
      #     path: |
      #       ${{ env.test_app_path }}/*.xcarchive

      # - name: Get IPA Artifact name
      #   id: get-ipa-artifact-name
      #   run: |
      #     ipa_artifact_name="${{ inputs.environment }} IPA"
      #     echo "IPA artifact name: $ipa_artifact_name"
      #     echo "ipa_artifact_name=$ipa_artifact_name" >> $GITHUB_OUTPUT

      # - name: Upload IPA
      #   id: upload-ipa
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: ${{ steps.get-ipa-artifact-name.outputs.ipa_artifact_name }}
      #     path: |
      #       ${{ env.test_app_path }}/*.ipa

      # - name: Upload to AppSend
      #   id: upload-to-appsend
      #   if: ${{ vars.SKIP_UPLOAD != 'true' }}
      #   continue-on-error: true
      #   run: |
      #     result=$(curl --insecure https://api.appsend.dev/v1/uploads/ -F file=@"$(ls *.ipa | head -n 1)") # we have encountered issues with the SSL certificate of this server on the GitHub Actions runner, therefore --insecure is used
      #     echo $result | jq '.'
      #     uid="$(echo $result | jq -r '.uid')"
      #     if [ -z "$uid" ]; then
      #       echo "[ERROR] Failed to upload to AppSend: $result"
      #       exit 1
      #     fi
      #     install_url="https://appsend.dev/i/$uid"
      #     echo "Download URL: $install_url"
      #     echo "install_url=$install_url" >> $GITHUB_OUTPUT
